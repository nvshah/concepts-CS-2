=> `library` keyword should be used when You are creating the custom library/package

---------

* dynamic vs List<dynamic> :
  -------
   You can assign dynamic to any type in dart  (at runtime there can be err)

   You cannnot assign List<dynamic> to List<T> // It will give compile time err


* InternalLinkedHashMap vs Map 
  ------
   https://stackoverflow.com/questions/57845333/dart-how-internallinkedhashmapstring-dynamic-convert-to-mapstring-dynami

   When you try to cast List<dynamic> as List<Map> it will work 
   but 
   it does not go true for InternalLinkedHashMap


* Factory Constructor vs Generative Constructor :
  -------------------------
   - If you have either of constructor you will loose the default constructor definition
   - If parent class has only factory constructor then you cannot extend it
   
   -> When a class implements a interface, It do not require that Parent class must have Generative Constructor 
      but 
      If a class extends (ie Inherits) from Parent class 
      then inorder to utilise the Generative Constructor of Child Class it is required that 
      Parent class also must have atleast 1 Generative Constructor 
      else 
      Child class can define Factory only 

   Why ?
    -> During implements => Child class is creating its own solid base class (with all impl in its envelope)
      Whereas 
       During extendns (ie Inheritance) => Child class is creating its own attribs 
       but along with this its also invoking Parent class (it many be abstract or not) Constructor (probably Generative)
       & 
       for this innvocation it requires that Parent class also possess default Generative Constructor

   NOTE :- 
    Factories actually hide the implicit Default generators constructor availabl at hand for each class definition

* Redirecting Factory Constructors :
  ------
  - https://stackoverflow.com/questions/69511105/assigning-subclass-to-a-factory-constructor-in-dart
  - https://github.com/flutter/flutter/issues/35727

* Field Innitialization in Dart is bit different :
  ------
   - When you define field at that moment its not get initialized but 
     if you refer that same field via this.fieldName then at that momment field gets initialized

  Note :- In latest dart :-
    You can also initialize the Parent class Fields via `super` keyword in the same way
    as you do with `this` keyword


* Type Promotion & Union Types :
  -----
  Union Types :- When we have a Type as a combination of multiple types
                Eg -> All Nullable Types (combination of Null + Primitive type)

              - For union type You can access those properties only which are common to underlying
                participating classes in that Union

  Type Promotion :
  ---
   -> It happens when Parent Class gets automatically Casted to Child Type

   1. Parent to Child Conversion (Promotion)
   2. Nullable to Non-Nullable Conversion (can also be considered as a Type Promotion )

   Promotion of General Type -> Specific Sub-Type

   => Type Promotion doesnt work for an object property because for an obj property
      it may differ on a second call

   => Local Variable Can be Promoted via Type Promotion

* `library` directive name :
   --------------------
   ref : https://github.com/dart-lang/language/issues/1073

   When to use this keyword and when to not ?
   -> If we not use this then flutter itself will provide a library name based on path & filename

   Most library do not use declarations

   Giving library a name of using the `library` directive makes sense in following scenarios :
   1. For avoiding duplicates imports with different paths
   2. Adding annotations/metadata to library
   3. Writing documentation for library

   Whilst modularizing the flutter App, try to create package in same project instead of hosting it on git
   this way you can ensure that you will get latest changes always


* Conditional Compilation|Imports :
  -----
  -> You can import packages conditionally in dart language


* Stopwatch & Timer :
  ----
  2 apis are avaialble as a part of dart core


* Stream :
  ----
  Q) What happen when we try to listen the closed Stream (Standard) -> Error
