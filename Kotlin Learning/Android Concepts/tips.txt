=> use @volatile to mark thise field or property, which needs to be access by 
   only 1 thread at a time 
   @volatile will make that particula field visible to all other threads

=? synchronied block for executing 1 block per thread at a time 

=> ROOM provides well safety with Coroutine Thread tasks so you can use 
   Coroutine Scope of Main while doing operations for ROOM 


* BloCkStore :- 
 ---------
  -> You can store auth tokens for your app inside Block STore 
     It can be useful whilst auto sign in in D2D transfer


* SavedStateHandler :
  -------
   -> To get the navigation argument passed whilst navigation
   -> to restore state of ViewModel


* GGradle Properties & Build Configg Prop : 
  ----
   -> We can use Gradle files to hold the config propeerty 
      modulee wise (ie declared in build.gradle file -> default Config {})

      Those Val will be avail unnder `BuildConfig` class


* Share the Object among multiple Composable Screen :
  ---
   1) Via BackStack State 
   2) Via Shared ViewModel


* Best Practice with API Keys
  ------------
  -> Prevent API Keys ffrom lurking in VCS

  * local.properties
    - store key in local properties from build.gradle file
    - buildConfigFiles() -> local.properties

  => Store Token in Jetpack Crupto Preferences instead of normal Shared Preferences


* LiveData vs StateFlow :
  --------------
  -> Both are meant for same purpose
     i.e maintain state & notify the observers when state changes

  -> LiveData is life-cycle aware whereas Stateflow is not

  -> However we can easily make Stateflow Life-Cycle aware by using LifeCycleScope

  => use Stateflow esp when rest your project uses Coroutine & Flows
     because that will synergizes so well

* CoroutineScope vs SupervisorScope :
  --------------
  -> Whenever any 1 child Coroutine fails it will stop all other residing in same CoroutineScope
     (in case of CoroutineScope)

     Which is not the case with SupervisorScope


* Sealed Interface vs boolean :
  -----
  -> If your boolean variable doesnt make sense on either of values
     then used
     Sealed Interface instead of boolean variable


* Connectivity Check (Lifecycle Aware)
  -----
  context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager

  ConnectivityManager.NetworkCallback(){}


* Convert Flow to State :
  ----
  val stateVal by flowObj.observe().collectAsState(initial= _)

=> Typically a ViewModel exposes the Stateflow to the UI/Presentation

* To check if app is minimzed or not, you can check LifeCycleOwner & Observer
