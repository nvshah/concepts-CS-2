* Shadowing | Encapsulating members  
  Overriding, Overloading   
  Lexical Scoping          
  
* Virtualisation          // {C#}

* Canonical instance      // {Dart, C#}
  String Interning        // {C#}

* Heap & Stack imp (with ref to memeory)
  Reference vs value types

* String Character Sets (Unicode in common)   

* Boxing, UnBoxing, Primitives, Wrappers(Java) Null Assignment   //{ Kotlin, C# }
  
* Monkey Patching // {Python}

* Accessors vs Fields

* mutability & constants, Immutable
  Mutable & Immutable Strings        (C#, Java - StringBuilder)

* Conversion, Casting, Coercing, Implicit, Upcasting   // Upcasting was supported in prev versions of dart

* Inheritance vs Composition

* Abstraction, instantiation, Proxy Object

* static|dynamic dispatch & Polymorphism 
  dispatch rules
  Runtime hierarchy checks  (Run time type vs Compile time type)
  Static vs Dynamic Binding

* Covariance / ContraVariant / Invariant
  Generics / List type conversion

* ref, out, in

* Value Caching & Interning (Primitives)(Implicit)   {Kotlin, Python, C#}

* Literals

* Sealed Classes vs Enum Classes     {Kotlin, Dart}
  Tagged Unions

* Garbage Collector & Reference Count {python(del)}
  
  Value equality vs Referential Equality   (diff way in diff Programming languages)
           \ 
             {python -> == & is
              Java/C# -> equals() & ==
              dart    -> == & identical()
              Kotlin/Js  -> == & === 
             }
* Generics
* Nested Classes & namespace
  Lexical Scope

* Full Qualifier Name (i.e static or inheritance case)

* Initializer List   ( eg dart )

* Struct vs Class vs Records ??


-----
Imp latest concepts :-
  
  - Immutable Objects Advantages ?? 

  - SParse Calculations vs Dense Calculations !!

  - Decorator | Annotations : (useful in gennerating the Code)

-----


Functional Programming :

 - context, Scope, & closure

 - short-circuit

 - Callbacks    // First-Class Citizens

 - Closure     // {Python, Dart}

 - local, global, free variables

 - Generators, Iterators, Iterables

 - Higher Order Functions (Partial Functions)

 - Lambda, Closures, Evaluation time (run time vs compile time binding)

 - VarArgs  (Java, Python, C#, Kotlin)

 - Memory Management

 - Free Function (Global Function)

 - Free List (Python)

 - Cyclic Reference (Tricky Assignment) (Python)

 - ShortHand | Inplace modification (mutable vs immutable)

* Package - Top Level Directory
  Module -> a module is a set of Kotlin files compiled together

  namespace, mappings, logical hierarchy, physical hierarchy  (c#, python)

* Memory Management (Python Heap, Stack)
  Reference Counter

* Sound Safety & Typed System :
  -----------
   -> No type conversion i.e casting is missing
   -> also implicit conversion is missing

* referential transparency : (Functional Programming)
  ---------
   -> Pure func :- for same inp func will provide same output
 
OOPS :-
----
 pass by Ref vs pass by Val 

  There can be 2 scenario for pass by ref in OOP language :-

    1) value is passed (i.e literals) sis passed entirely.  {Eg in java}

    2) or Constant object (i.e singleton) address is passed everytime reference is demanded 
       {Eg in Kotlin}


  OOPS :- topics 

     properties, data memebers
       \
        custom accessors [getters, setters]

     Overloading

     Inheritance (accept) vs Composition (include)
       \                      \
       tight coupled          Loosely decoupled

     Polymorphism & static dispatch :
     -------------------------
      -> decision of which specific operation is selected at compile time

     Interfaces :
     ----------
      -> What Object can Do
      ->  If your goal is to share behavior (what objects can do) between types, 
          more often than not you should prefer interfaces over subclassing

     Abstract CLasses & Sealed Classes

     Proxy Objects & Super() relation


* Heap & Stack Importance :
  -----------
   -> When you instantiate any object in OOPS 
      \
       memory is allocated on Heap [real object lies]
        & 
       reference is stored on stack in a variable (as Stack is tightly bound with CPU) 

    => The system uses the stack to store anything on the immediate thread of execution; 
       it  is tightly managed and optimized by the CPU.

    => The system uses the heap to store instances of reference types

* Encapsulating Variable or Shadowing Variable within Scope :
  -----------------------------

* compile time vs run time Type :
  --------------------
   - var, dynanamic, final, const

* Overloading
  ------
   -> dispatchers (static, dynamic)


* Value Caching & Interning

* Loopings :
  -------
   - For Loop, For Each Loop




--------------------------------------

Tricky OOPS Que 

1) Why `this` is allowed in Abstract classes | (Proxy Object Concept)
   Can abstract class can be instantiated anyhow ! (yes via subclasses)

2) Why fields cannot be overriden & Shadowed in class hierarchy
    \
     in Java it cannot be overriden but In Dart It can be !!
   
3) Sealed Classes vs Enum Classes (Kotlin)

4) Polymorphism Tricky Que


*QUE) What is Optimistic Update ??
-> 


---------------
(ANDROID)

q1) Diff betweeen Flutter vs Kotlin Compose :

  -> Widgets in Flutter are objects of Classes 
     Composable in Kotlin are objects of Functions   