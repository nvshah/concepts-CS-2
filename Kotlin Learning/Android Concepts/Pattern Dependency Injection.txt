Dependency Injection :

Ways :
 - Service Locator
 - Dagger|Hilt
 - Koin
 - Kodein

______________________________________

* DI (Stevdza) 
----
  - Dependency Injection is one of the design pattern for improving quality and maintainability of code
  - Reduce Coupling
    |
    -> Instead oc creating obj on your own, 
       Delegate the responsibility to a seperate component (called as DI container)

    DI container :- 
    - takes care of creating and managing the objects that you need

  Types

  Manual DI

  1) Constructor Injection

  2) Field Injection 

     -> Certain Android classes (such as Activities and Fragments) are instantiated by Android System only
        So Constructor Injection in such case wont be possible, hennce we have field injection


  Via Package DI

  1) Dagger
  2) KOIN

* DI 
-----
  Its very bad practice to create/instantiate object inside Activity
  because it makes object dependent on that activity 

  DI dont change functionality of app but makes more cleaner & better architecture wise

  Kodein.lazy{} allows us to use application context`


Dagger vs Kode-in :
  -----
  Dagger - is a Dependecy Injection 
  Kode-in - service locator 

  DI :- happens at compile time 
  Service locator :- happens at run-time

  So Dagger is more performant thann Kode-in






--------------- Extra -----------------


* View Model Advantage :
  ------
   -> LiveData 
      ---
       -> When Device is rotated, then all data from Activity gets lost 
          but 
          If we follow MVVM pattern then its not much concern as We can immediately get those 
          data from LiveData 
