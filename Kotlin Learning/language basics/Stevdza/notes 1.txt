notes 1
--------
TIPS :

> To check parameter of func : ctrl + P
> to check the inference :- ctrl + Q

//*-> IDE tip: fun0, fun1, fun2  [Live Templates]

-> Func if doesnt have returntype then default is UNIT

----------------------------

* Functions :
  ---
  1. Block Body Func         {}   // curly brackets
  2. Expression Body Func    =    // equal to operator

  NOTE: 
  You can use backticks while providing a functionname where you can then provide anything as name
  & it would be a valid func name
  ref : https://commonsware.com/Kotlin/pages/chap-escapedmethodname-003.html

  Naming conventions of a test functions allow us to use any characters including whitespace (via backticks)

* String Template :

* do while Loop :-


* Range :
  ---
  keywords :- {until, downTo, step}

  1..10
  1 until 10  // 1..9
  1..10 step 2  // odd nums
  3 downTo 1  // 3..1

  'a'..'z'   // characters
  '0'..'9'

  IntProgression :- the class that represents the progression of type Int
  ----

NOTE
=> Now Range (IntRange) in kotlin inherits the IntProgression class

=> In kotlin we can add character & int (as character can be represented via int because unicode has some
   corresp number to it)
   character + Int  => character


* repeat block :  repeat(exp){}


* `in` keyword :
  -------
  => used to iterate inside a for loop (or sequence/collections)
  -> used to check membership in Range, List, String,...

  !in := not in


* Statement & Expressions :
  ------
  -> It doesnt produces the result
  -> It cannot be assigned
  -> Statement changes the state

  -> Statement is an effect, it doesnt produce any result
  -> An Expression always produced the result & An Expression can be assigned

  Eg Function in kotlin has 2 types of body
     1. Block Body
     2. Expression Body



* Null in Kotlin :
  ----
  Elvis operator :- `?:`