* Process Death :
  -----
   -> When app is killed by android (beware its in background or foreground)

   saveStateHandler()   // use to remember val of state 


* Deep Link
  ---
  ref : https://medium.com/androiddevelopers/the-deep-links-crash-course-part-1-introduction-to-deep-links-2189e509e269

  3 types of Linking
  1) Deep Link (with any Scheme)
  2) Web Link (with http/https as scheme)
  3) Android App Linking (with surity of unique Route/Destination)

* Per-app lang preferences :
  ----
  ref : Android Developers (Youtube)

  -> English is a bridge language

  2 ways to change your lang settings
  1. Device Settings
  2. In App itself

  NOTE : Both must be in sync

  To declare your app supported languages
  -> in your app `AndroidManifest.xml` file
     add <locale-config>
     |
      -> This Xml-element will have list of App-Supported elements as its child nodes

  -> Android X & above -> user preferences for language to an app is automatically stored per app
     \
      -> For this you need to set "autoStoreLocale" to true in AndroidManifest file
         (This will delegate the Storage to androidX Pre-T

  -> Migrate to runtime API :- AppCompatDelegate
     Migrate Storage :- autoStoreLocales
     In Device Settings :- localeConfig


* Secure (Encrypted) Storage :
  --------
  Android :- KeyStore
  IOS :- KeyChain


* BaseLine Profiles :
  ----


* Pending Intents &


* Android Fragments & androidx Lifecycle :
  ---------
  ref : https://www.youtube.com/watch?v=OE-tDh3d1F4

  - Lifecycle is a essential component of an Latest modern Fragment as a part of AndroidX

  - provides api's such as `repeatOnLifeCycle()`

  -> You shouldn't be reaching Fragment for usecase where that component is living longer
     (ie for eg Configuration change)

  -> Ui elements + State Holders
     -> State holder provides the UI state to your fragment

  -> When does ViewModel gets shared
     - For Eg
       Let say ViewPager2 has 3 pages (ie 3 corresp Fragments)
       then
       in this case each fragment can have a shared ViewModel


* Insets :
  ----
  -> How much content of your needs to be padded to avoid overlap with System UI contents
  -> There are different types of insets for different type of parts in System UI
     For eg Status Bar, Navigation Bar

  -> Insets can change based on your device at runtime

  -> WindowInsets, imePadding(), imeNestedScroll()

  // ime... applies automatically animation for insets obstruction by system UI components such as keyboard
