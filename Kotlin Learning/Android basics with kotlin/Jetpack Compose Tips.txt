Jetpack Compose Tips
-------------------

=> Recomposition should not happen just because the position changes of that corresp composables
    |
    TIPS to avoid :
    1) Instead of passing as an Exact type as an argument pass it as a Lambda
       (becayse Composables most time Do not Recompose when Lambda is parameter)

_______________

* Responsive (Mobile | Tablet)
  -> LocalConfiguration.current  // window size (height, width)

* Adaptive (Mobile | Tablet)
  -> BoxWithConstraints  // Composable
       - maxWidth, maxHeight

  => Alongwith BoxWithConstraints we should use some relative values & not the fixed values
     (Eg WeightModifier (ie Flex) )


* Avoid Unnecessary Recompositon :
  ---
  Eg When you filter List inside LazyColumn's 1 child

  2 Ways to avoid

  1) remember the filtered list initially &
     update only when original list changes instead of every time recomposition

  NOTE When we pass param to remember(param){}
       then that remember will observer that `param` changes & execute the block likewise

  2) Use derivedStateOf(){} instead of remember(keyName){}

    : derivedStateOf -> is efficient as it will only recompose if the return from re-execution changes as compare to previous

    : remember wit Key -> will re-execute everytime when key changes.
                          However it doesnt consider after re-execution the re-computed val is same as previous or not !

    => Use derived state of when the keys changes more often/frequently


* mutableStateListOf  :- makes the mutable list observables !

  REMEMBER :- mutableListOf() is not by default observables


* composed function :
  ------
  -> returns the modifier
  -> Useful in developing the extensions on Modifier for Stateful Modifier,
     Where modifier needs to do some work when composed state changes (ie consider animation)
  -> this way we will get composition context
      \
       When the state chages we can then change the Modifier (via this composed function)


* graphicsLayer {}
  -------------
  -> can be used to apply certain transformation, rotation ,scaling to our composables !


* Lifecycle Events For Compose :
  --------------
  onUserLeaveHint()  // called when user leaves the screen (ie via minimizes or going to other app)

* onGloballyPositioned :
  -----
  -> Callback that is called whenever the compose is rendered & positioned (ie Drawn on the Screen)
  -> Provides the Layout Coordinates


* To get the Rectangle Bounds Surrounding the Current Composable :
  ---
  .onGloballyPositioned{
    print(it.boundsInWindow().toAndroidRect())
  }


* To run some code at start of particular Jetpack Composable :- use `SideEffect{}` block


* ProvideTextStyleLocal(){}  // provide the overrident text styke down the composables

* FontFamilyResolver :- // To resolve & cache the fonts (download) at runtime
  FontVariation Api


* Compose & Animation Tips :
  ---

  AnimatedVisibility()   // For visibility
  AnimatedContent{}  // For Transition
  animateFloatAsState{}  // automatically performs animation when state changes

  rememberInfiniteTransition()  // to animate infinitely

  .animateContentSize()  // on Modifier


* Modifier :
  ----
  -> You can control `graphicsLayer`

  graphicsLayer :- can help you achieve the translation of your Composable


* rememberCoroutineScope() :
  ----
  -> use this scope only for functionalities that are restricted to UI
     else dont use this scope
     If there are beyond UI related usecase then you can use other scopes such as
     ViewModelScope

  TIP: Dont expose suspend functions from ViewModel
        \
         Otherwise there may chance that somethings may not survive configuration changes
         (if this functions are used from Coroutine Scope exposed by Compose
          which is meant for UI-RELATED-THING only )

  On the other hand
  -> you can use CoroutineScope for Animations because
     Animations often are independent from ViewModel

  => So at the end You need to decide based on
     What is UI-related-thing & What is not
     |
     If its only UI-related thing then you can use `rememberCoroutineScope` without another thought


* Compose & XML together :
  --------
  If you want to use Compose in a XML :-
    -> Simple include ComposeView Element in an XML File
  & then you can set composable content by calling setContent()

  If you want to use XML view in your Composable then
    -> AndroidView() in  your Composable
  & then
    factory block :- helps to create a xml view
    update block :- helps when compose state changes to update view
