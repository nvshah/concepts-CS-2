1) Dependency Injection & Abstraction :
   -----
    Use DI ie locator to deal with which impl instance to create based on some 
    tags bool set 
    ie 
    Let Service decide the impl-choices

    but the consuming part ie Business Logic or Presentation should direct consumme that 
    service via single name regardless of underlying complexities ie impl-agnostic 


2) provider setup dart file 
   ------
    providers can be segregated into 3 categories 
      \
       - independent-services   // API 
       - dependent-services    
       - uiConsumableProviders

REMEMBER :-
-> The more often you widget tree changes from 1 frame to nect frame,
   the more it needs for Flutter to alter or change the portion of Element Tree !



* File & Folder Structure :
  ---
  - Barrel Files folder to expose (export) all private libraries or dart files


* Packages & Assets :
  ----
  - When you develop the custo flutter package then if that package is using the assets
    then if you declare that assets in that package's pubspec file then it will get bundled along with it
    Otherwise
    You need to keep the assets in lib/ folder inorder to expose to Consumer Application

  REMEMBER :
  - To use the assets inside your Custom Flutter Package, you need to prepend the asset path via
    `packages/pkgName/assetPath`

  1 Exception :
  - If your package lies as a sibbling to your consuming application then you can refer that package
    into your consuming application directly via relative referencing

    ../pkgName

    (So here in this case you dont need `packages/pkgName` to be appended as a prefix inside your package
    wherever assetPath is used !


* Observables & Streams :
  ---
  These 2 are techniques to achieve state reflection

  Observalbles :- ValueNotifier (Mutable)
  Streams :- BLOC (Immutable)
