ref :- 
  https://resocoder.com/2018/10/06/kotlin-coroutines-tutorial-stable-version-async-await-withcontext-launch/

_______________________________________


Coroutine = suspendable function = async method (in Flutter)

runBlocing = async block with implicit await when required 
           = alternative to suspend function for code block

launch() = new coroutine scope => async block in Flutter

.join()  = await in flutter

deffered = Future in flutter

suspendCoroutine // Use to convert any func to awaitable suspended func
                   (useful when we want to convert callback to awaitCallback())

=> - use async when you want to run multiple calculations concurrently
     when you want to await multiple things at oncne use async 

   - dont want to run concurrently you can use withContext{}

**
=> So it's not good practice to put try catch inside the launch block
   because it will eat up the Cancellation Exception as well (if we catch general Exception & not specific Exception)
______________________________________

NOTE :- Suspended Fun when use another suspended fun inside it implicitly await & do synchronous operation 
        You need to use asunc block 

-----

* Thread :
  -----
   - sleep()   // sleeps a thread 

   - main Thread

* Coroutine :
  ------
   -> are a light weight Threads
   - a way to manipulate the Threads


* delay () :- on Coroutine suspend function

* suspend function : 
  ----
   -> you need to create suspend fun to call other suspend fun
   -> It is called as Coroutine


* runBlocking :
  -------
   -> pretty much simulating Thread.sleep()  // blocks the current thread
   -> alternative to suspend fun 

   ie suspend fun f1(){}
      
      fun f2 = runBlocking(){}

      f1 & d2 are similar in terms of Concepts

   -> runBlocking = async method where await is implicitly applied for the Coroutines in the enclosing context

   Dispatcher :
   ----
    -> When we provide Dispatcher to runBLocking ie Coroutine it will switch to 
       different thread most of the time.

    => eventhough runBLocking code runs in different thread via Dispatcher, 
       it will block the current Thread 


* GlobalScope.launch :
  --------
   -> delegate work to new Thread (child or worker thread)
   -> But this time this Thread will work non-blocking way to current thread
   -> to execute the block of code not Blocking current Thread

   Job :
   ----
    -> returned by the GlobalScope.launch{}
    
    -> .join() to await in current thread till the job gets completed in either another thread or current thread

* this.launch :
  ------
   -> If you launch new Coroutine job in current coroutine scope 
      then you do not require to await or join() the job

=> all in all :
   ----
    - If you launch new async code as a child or sibling of current Coroutine scope 
      then no need to join() as current Coroutine is aware about its children

    - If you launch new async code in seperate Scope then you need to join 
      explicitly

    - Within same scope you can utilise to work with dif Threads

* Dispatcher :
  -------
   will dispatch ie delegate your job code to one of Thread in its Pool (ie Queue)

* async block :
  ---------
   .await()  // to get return value from suspended function ie Coroutine

   async returns the deffered

   => async will throw the exception from block when it is awaited (ie .await() is called)


* withContext :
  -------
   - doesnt returns deffered but it returns whatever coming out directly from the async block
   - its equivalent to calling await() after each async block


=> - use async when you want to run multiple calculations concurrently
     when you want to await multiple things at oncne use async 

   - dont want to run concurrently you can use withContext{}

* CoroutineExceptionHandler :
  ----
  -> helps to caught any uncaught exception from child coroutines or parent at the Root Coroutine
  -> ( This handler is installed in the root Coroutine closure )

  NOTE :- CancellationException in Coroutines are handled by default as you don't want it to propogate
          as this is internal & expected behaviour

  REMEMBER :
  -> For CoroutineScope, asa 1 child coroutine fails, it will cancel all children coroutines &
     then also cancel the scope itself as well

  -> On single failure whole Scope (including root) is cancelled

* SuperVisor Scope :
  ----
   superVisorScope{}
   -> If 1 coroutine under this scope fails or throws exception, it wont affect other (sibbling)
      Coroutines execution in that scope

* Cancelling a Coroutine (Amazing Fact) :
  ----
  -> Whenever we call .cancel() on job or deferred instance of coroutine
     What happen ?
     -> Eventhought we cancel the coroutine (ie the lauch block)
        The current function that is suspending that particular Coroutine (on which we call .cancel())
        will throw a Cancellation Exception
     **
     => So it's not good practice to put try catch inside the launch block
        because it will eat up the Cancellation Exception as well (if we catch general Exception & not specific Exception)
        Otherwise
        Rethrow the Exception if its Cancellation Exception
____________

Q1) launch vs async
->
   launch is kinda void callback where we do some work asynchronously but did not expect anythin in return
   so it returns Job

   async is block through which we can expect something in return after Deferred time
   so it returns Deferred object

   Exceptions:
   - with launch Program will crash immediately asa Exception is thrown
   - whereas in case of async program is crash asa await() is called not when exception is thrown


Q2) Coroutine Tree
->
   Exception are propogated up to Coroutine Tree

Q3) CoroutineScope vs SupervisorScope
-> CoroutineScope :- If any 1 sub-coroutine fails it will affects all & stops other coroutines in that scope
   superVisorScope :- the failure of a child coroutine will not affect other coroutines in same scope

   Simply,
   If 1 fails all other fails // in CoroutineScope
   If 1 fails not all other fails // in superVisorScope
---------------
GOOD PRactices

1) Calling Multiple API Fun (Suspended Fun)
    \
     -> CoroutineScope -> async{} -> deffered -> awaitall()

     - ensureActive()


2) Main Safe & Suspended Fun :
   ---
    ->

3) ViewModel should not expose the Suspending Function to UI

[RULE of THUMB]
4) To utilise the suspended fun inside non-suspended fun we need some scope
   ViewModel Scope outlives the lifecycle of activity

5) Turn your Callback into awaited Callback // so that you can act when that callback happens
  -> via `suspendCoroutine{ continuation -> //TODO }
